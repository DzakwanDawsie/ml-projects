# -*- coding: utf-8 -*-
"""DCD_MLT_Proyek Akhir.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x6jb8_zlSV64YhxrYYdugVc4a0vBWYPC

# Proyek Rekomendasi Anime
- **Nama:** Dzakwan Dawsie
- **Email:** d.dawsie136@gmail.com
- **ID Dicoding:** zack01

## Import Semua Packages/Library yang Digunakan
"""

import numpy as np
import re
import string
import pandas as pd
import nltk
import matplotlib.pyplot as plt

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from google.colab import files

from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

"""Konfigurasi library"""

seed = 0
np.random.seed(seed)
pd.options.mode.chained_assignment = None

nltk.download('punkt')
nltk.download('stopwords')

"""## Data Preparation

### Data Loading

Mengupload dataset csv melalui form dibawah ini
"""

uploaded = files.upload()
filenames = list(uploaded.keys())
filename = filenames[0]

print(f"Uploaded file: {filename}")

"""Membuka dataset menggunakan pandas dan menjadikannya DataFrame"""

anime_df = pd.read_csv(filename)

"""Cek jumlah baris dan kolom pada DataFrame

*jika csv sesuai, maka jumlah baris dan kolomnya adalah 19.311 baris x 12 kolom*
"""

jumlah_ulasan, jumlah_kolom = anime_df.shape

print(f"Jumlah baris: {jumlah_ulasan}")
print(f"Jumlah kolom: {jumlah_kolom}")

"""Preview data"""

anime_df.head()

"""### Data Understanding

Cek informasi kolom pada DataFrame
"""

anime_df.info()

"""#### Data Understanding

Cek ada berapa data yang null
"""

anime_df.isnull().sum()

anime_df.isnull().sum().plot(kind='bar', figsize=(10, 6))
plt.title('Jumlah Data Null per Kolom')
plt.xlabel('Kolom')
plt.ylabel('Jumlah Data Null')
plt.xticks(rotation=60)
plt.show()

"""Cek duplikasi data"""

jumlah_baris = anime_df.shape[0]
print(f"Jumlah baris: {jumlah_baris}")

jumlah_uid_unik = anime_df['uid'].nunique()
print("Jumlah baris unik berdasarkan uid:", jumlah_uid_unik)

jumlah_duplikat = jumlah_baris - jumlah_uid_unik
print("Jumlah duplikat:", jumlah_duplikat)

labels = ['Unik', 'Duplikat']
sizes = [jumlah_uid_unik, jumlah_duplikat]
colors = ['green', 'red']

plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.axis('equal')
plt.title('Perbandingan Data Unik dan Duplikat Berdasarkan UID')
plt.show()

jumlah_not_available = anime_df[anime_df['aired'] == 'Not available'].shape[0]
print("Jumlah baris dengan nilai 'Not available' pada kolom 'aired':", jumlah_not_available)

jumlah_available = anime_df[anime_df['aired'] != 'Not available'].shape[0]
print("Jumlah baris dengan nilai selain 'Not available' pada kolom 'aired':", jumlah_available)

labels = ['Not Available', 'Available']
sizes = [jumlah_not_available, jumlah_available]
colors = ['red', 'green']

plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)
plt.axis('equal')
plt.title('Perbandingan Data dengan Kolom "aired" yang Bernilai "Not available" dan yang Bukan')
plt.show()

"""### Data Preprocessing"""

anime_df.drop(['uid'], axis=1, inplace=True)

print("Jumlah kolom setelah menghapus kolom 'uid'", anime_df.shape[1])

"""Hapus baris `synopsis` yang bernilai null"""

anime_df.dropna(subset=['synopsis'], inplace=True)

print("Jumlah baris setelah menghapus baris dengan nilai null pada kolom 'synopsis':", anime_df.shape[0])

"""Hapus kolom `episodes`"""

anime_df.drop('episodes', axis=1, inplace=True)

print("Jumlah kolom setelah menghapus kolom 'episodes':", anime_df.shape[1])

"""Replace kolom `ranked` yang bernilai null dengan nilai maksimum dari `ranked`"""

max_ranked = anime_df['ranked'].max()
anime_df['ranked'].fillna(max_ranked, inplace=True)

print("Jumlah baris setelah mengganti nilai null pada kolom 'ranked' dengan nilai maksimum:", anime_df.shape[0])

"""Replace kolom `score` yang bernilai null dengan nilai rata-rata dari `score`"""

mean_score = anime_df['score'].mean()
anime_df['score'].fillna(mean_score, inplace=True)

print("Jumlah baris setelah mengganti nilai null pada kolom 'score' dengan nilai rata-rata:", anime_df.shape[0])

"""Menghapus kolom `img_url` dan `link` dan `aired`"""

anime_df.drop(['img_url', 'link', 'aired'], axis=1, inplace=True)

print("Jumlah kolom setelah menghapus kolom 'img_url' dan 'link':", anime_df.shape[1])

"""Transformasi nilai pada kolom `genre` menjadi kolom tersendiri"""

unique_genre_list = anime_df['genre'].apply(eval).explode().unique()
unique_genre_list = set(unique_genre_list)

for genre in unique_genre_list:
    if isinstance(genre, str):
        anime_df[genre] = anime_df['genre'].str.contains(genre).astype(int)

"""Hapus kolom `genre` setelah transformasi"""

anime_df.drop('genre', axis=1, inplace=True)

print("Jumlah kolom setelah transformasi", anime_df.shape[1])

"""Lakukan beberapa teknik preprocessing text terhadap kolom `synopsis` dan membuatkannya kolom baru, yaitu `synopsis_clean`"""

def cleaningText(text):
    text = re.sub(r'@[A-Za-z0-9]+', '', text)
    text = re.sub(r'#[A-Za-z0-9]+', '', text)
    text = re.sub(r'RT[\s]', '', text)
    text = re.sub(r"http\S+", '', text)
    text = re.sub(r'[0-9]+', '', text)
    text = re.sub(r'[^\w\s]', '', text)

    text = text.replace('\n', ' ')
    text = text.translate(str.maketrans('', '', string.punctuation))
    text = text.strip(' ')
    return text

def casefoldingText(text):
    text = text.lower()
    return text

def tokenizingText(text):
    text = word_tokenize(text)
    return text

def filteringText(text):
    listStopwords = set(stopwords.words('english'))
    filtered = []
    for txt in text:
        if txt not in listStopwords:
            filtered.append(txt)
    text = filtered
    return text

def toSentence(list_words):
    sentence = ' '.join(word for word in list_words)
    return sentence

anime_df['synopsis_clean'] = anime_df['synopsis'].apply(cleaningText)

anime_df['synopsis_clean'] = anime_df['synopsis_clean'].apply(casefoldingText)

anime_df['synopsis_clean'] = anime_df['synopsis_clean'].apply(tokenizingText)

anime_df['synopsis_clean'] = anime_df['synopsis_clean'].apply(filteringText)

anime_df['synopsis_clean'] = anime_df['synopsis_clean'].apply(toSentence)

"""Hapus kolom `synopsis` setelah preprocessing text"""

anime_df.drop('synopsis', axis=1, inplace=True)

"""Melakukan feature encoding menggunakan TF-ID"""

tfidf = TfidfVectorizer(max_features=8000)
tfidf_matrix = tfidf.fit_transform(anime_df['synopsis_clean'])
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf.get_feature_names_out())

print("Jumlah kolom setelah transformasi", tfidf_df.shape[1])

"""Gabungkan `feature` hasil encoding dengan DataFrame `anime_df` tanpa kolom `title` dan `synopsis_clean`"""

features = anime_df.drop(['title', 'synopsis_clean'], axis=1, inplace=False).reset_index().merge(tfidf_df, left_index=True, right_index=True)

print("Jumlah kolom setelah digabungkan:", features.shape[1])

"""Hapus variabel untuk mengurangi beban RAM"""

del tfidf
del tfidf_df
del tfidf_matrix

"""## Modelling

Buat model menggunakan cosine similarity
"""

cosine_sim = cosine_similarity(features)

"""Hapus variabel untuk mengurangi beban RAM"""

del features

cosine_sim_df = pd.DataFrame(cosine_sim, index=anime_df['title'], columns=anime_df['title'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""## Result

Buat fungsi `get_recommendations()` untuk memproses rekomendasi
"""

def get_recommendations(title, cosine_sim=cosine_sim):
    idx = anime_df[anime_df['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:11]
    anime_indices = [i[0] for i in sim_scores]
    return anime_df['title'].iloc[anime_indices]

"""Melakukan rekomendasi menggunakan fungsi `get_recommendations()`"""

title_to_recommend = anime_df['title'].iloc[0]
print("Anda mencari rekomendasi anime untuk anime:", title_to_recommend)

result = get_recommendations(title_to_recommend)
result